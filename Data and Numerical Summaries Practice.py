# -*- coding: utf-8 -*-
"""November 11

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15WAcRSAlE-mIe_BjQGlmk69PIOIwfadP
"""

#Step 1: Importing data and preprocessing
from sklearn.datasets import load_iris #import the dataset
X, y = load_iris(return_X_y=True)
X = X[:, :2] # we only take the first two features for visualization purposes
#Step 2: Splitting the data
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20)
#Step 3: Selecting and Creating the model
from sklearn.tree import DecisionTreeClassifier
clf = DecisionTreeClassifier()
#Step 4: training the model on training set
clf.fit(X_train, y_train)
#Step 5: Using the trained model predict the output for testing set
y_pred = clf.predict(X_test)
#Step 6: Evaluate the model
print('Accuracy is:', round(clf.score (X_test, y_test),2));
#plot the decision boundary by calling the following ‘user-defined’ function
import matplotlib.pyplot as plt
from mlxtend.plotting import plot_decision_regions
plot_decision_regions(X_train, y_train, clf)
plt.xlabel('Sepal Length')
plt.ylabel('Sepal Width')

from sklearn.neighbors import KNeighborsClassifier #import the KNN class
clf = KNeighborsClassifier()
#Step 4: training the model on training set
clf.fit(X_train, y_train)
#Step 5: Using the trained model predict the output for testing set
y_pred = clf.predict(X_test)
#Step 6: Evaluate the model
print('Accuracy is:', round(clf.score (X_test, y_test),2));
#plot the decision boundary by calling the following ‘user-defined’ function
import matplotlib.pyplot as plt
from mlxtend.plotting import plot_decision_regions
plot_decision_regions(X_train, y_train, clf)
plt.xlabel('Sepal Length')
plt.ylabel('Sepal Width')

from sklearn.naive_bayes import GaussianNB #import the NB class
clf = GaussianNB()
#Step 4: training the model on training set
clf.fit(X_train, y_train)
#Step 5: Using the trained model predict the output for testing set
y_pred = clf.predict(X_test)
#Step 6: Evaluate the model
print('Accuracy is:', round(clf.score (X_test, y_test),2));
#plot the decision boundary by calling the following ‘user-defined’ function
import matplotlib.pyplot as plt
from mlxtend.plotting import plot_decision_regions
plot_decision_regions(X_train, y_train, clf)
plt.xlabel('Sepal Length')
plt.ylabel('Sepal Width')

from sklearn.svm import LinearSVC #import the tree class
clf = LinearSVC()
#Step 4: training the model on training set
clf.fit(X_train, y_train)
#Step 5: Using the trained model predict the output for testing set
y_pred = clf.predict(X_test)
#Step 6: Evaluate the model
print('Accuracy is:', round(clf.score (X_test, y_test),2));
#plot the decision boundary by calling the following ‘user-defined’ function
import matplotlib.pyplot as plt
from mlxtend.plotting import plot_decision_regions
plot_decision_regions(X_train, y_train, clf)
plt.xlabel('Sepal Length')
plt.ylabel('Sepal Width')

from sklearn.svm import SVC #import the tree class
clf = SVC(kernel = "poly")
#Step 4: training the model on training set
clf.fit(X_train, y_train)
#Step 5: Using the trained model predict the output for testing set
y_pred = clf.predict(X_test)
#Step 6: Evaluate the model
print('Accuracy is:', round(clf.score (X_test, y_test),2));
#plot the decision boundary by calling the following ‘user-defined’ function
import matplotlib.pyplot as plt
from mlxtend.plotting import plot_decision_regions
plot_decision_regions(X_train, y_train, clf)
plt.xlabel('Sepal Length')
plt.ylabel('Sepal Width')

clf = SVC(kernel="rbf")
#Step 4: training the model on training set
clf.fit(X_train, y_train)
#Step 5: Using the trained model predict the output for testing set
y_pred = clf.predict(X_test)
#Step 6: Evaluate the model
print('Accuracy is:', round(clf.score (X_test, y_test),2));
#plot the decision boundary by calling the following ‘user-defined’ function
import matplotlib.pyplot as plt
from mlxtend.plotting import plot_decision_regions
plot_decision_regions(X_train, y_train, clf)
plt.xlabel('Sepal Length')
plt.ylabel('Sepal Width')