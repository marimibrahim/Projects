# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_s2z6qrZZjcvhBoKNh8cAEJ14XwHBSP3
"""

import pandas as pd
df = pd.DataFrame(data = ["apple", "apple", "banana", "orange", "apple", "apple", "banana", "apple", "orange", "banana", "banana"], columns = ["fruit"])
absolute_frequencies = df["fruit"].value_counts()
df2 = pd.DataFrame({'fruit': absolute_frequencies}, index = ["apple", "banana", "orange"])
df2.plot.pie(y='fruit', figsize=(5,5), autopct='%1.1f%%')

import matplotlib.pyplot as plt
import seaborn as sns
df = pd.DataFrame(data = ['apple', 'apple', 'banana', 'orange', 'apple', 'apple', 'banana', 'banana', 'orange', 'banana', 'apple'], columns=['Fruit'])
sns.set(style='darkgrid') #optional
plt.figure(figsize=(5,5)) #width and height in inches
sns.countplot(x='Fruit', data=df, hue=df['Fruit'])

df = pd.DataFrame(data = ['CS', 'CoE', 'CS', 'CoE', 'ME', 'INE',
'ME', 'ChE', 'CvE', 'CS', 'CoE', 'CS', 'CoE', 'ELE', 'INE', 'ME',
'ChE', 'CvE', 'CS', 'CoE', 'CS', 'CS', 'ELE', 'INE', 'ME', 'ChE',
'ELE', 'CS', 'CoE', 'CS', 'CS', 'ELE', 'ME', 'ME', 'CS', 'CoE',],
columns=['Major'])
sns.set(style="darkgrid")
plt.figure(figsize = (5,5))
sns.countplot(x = "Major", data = df, hue = df["Major"])

absolute_frequencies = df["Major"].value_counts()
df2 = pd.DataFrame({'Major': absolute_frequencies}, index = ["CS", "CoE", "ME", "INE", "ChE", "CvE", "ELE"])
df2.plot.pie(y='Major', figsize=(5,5), autopct='%1.1f%%')

import numpy as np
mydata = np.random.normal(170, 10, 250)
ax = sns.histplot(data = mydata)
ax.set_xlabel("Value")
ax.set_ylabel("Frequency")
ax.set_title("Histogram of data")

from sklearn import preprocessing
import numpy as np

x_train = np.array([[ 1., -1., 2.], [ 2., 0., 0.], [ 0., 1., -1.]])
print(x_train)
min_max_scaler = preprocessing.MinMaxScaler()
X_train_minmax = min_max_scaler.fit_transform(x_train)
print(X_train_minmax)

from sklearn import preprocessing
import numpy as np
X = [['male', 'from US', 'uses Safari'], ['female', 'from Europe',
'uses Firefox']]
enc = preprocessing.OrdinalEncoder()
enc.fit(X)
#notice the input to transform is a 2D array hence the [[..]]
rst = enc.transform([['female', 'from US', 'uses Safari']])
print(rst)

#Step 1: Importing data and preprocessing
from sklearn.datasets import fetch_california_housing
housing_data = fetch_california_housing() #load the dataset
X = housing_data.data # represent the feature matrix
y = housing_data.target # represent the output data
#Step 2: Splitting the data
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30)
#Step 3: Selecting and Creating the model
from sklearn.linear_model import LinearRegression
regressor = LinearRegression()
#Step 4: training the model on training set
regressor.fit(X_train, y_train)
#Optional code to print out the coefficients
import numpy as np
print("Coefficients:\n", np.round(regressor.coef_,2))
print('Intercept:\n', round(regressor.intercept_,2))
#Step 5: Using the trained model predict the output for testing set
y_pred = regressor.predict(X_test)
#Step 6: Evaluate the model
from sklearn.metrics import mean_squared_error, r2_score
print("Mean squared error: " , round(mean_squared_error(y_test, y_pred),2))
print("Coefficient of determination: ", round(r2_score(y_test, y_pred),2))

#Step 1: Importing data and preprocessing
from sklearn import datasets
X, y = datasets.load_diabetes(return_X_y=True)
#Step 2: Splitting the data
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state = 1)
#Step 3: Selecting and Creating the model
from sklearn.linear_model import LinearRegression
regressor = LinearRegression()
#Step 4: training the model on training set
regressor.fit(X_train, y_train)
#Optional code to print out the coefficients
import numpy as np
print("Coefficients:\n", np.round(regressor.coef_,2))
print('Intercept:\n', round(regressor.intercept_,2))
#Step 5: Using the trained model predict the output for testing set
y_pred = regressor.predict(X_test)
#Step 6: Evaluate the model
from sklearn.metrics import mean_squared_error, r2_score
print("Mean squared error: " , round(mean_squared_error(y_test, y_pred),2))
print("Coefficient of determination: ", round(r2_score(y_test, y_pred),2))

import matplotlib.pyplot as plt
#plot basic scatterplot
plt.scatter(X_test[:,2], y_test, label =
'Actual')
#plot the regression line
plt.scatter(X_test[:,2], y_pred, label =
'Predicted' )
plt.xlabel("Scaled BMI")
plt.ylabel("Disease Progression")
plt.legend()
plt.show()

#Step 1: Importing data and preprocessing
from sklearn import datasets
X, y = datasets.load_diabetes(return_X_y=True)
#Step 2: Splitting the data
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state = 1)
#Step 3: Selecting and Creating the model
from sklearn.svm import SVR
regressor = SVR(kernel = 'poly') #degree 3 is default value
#Step 4: training the model on training set
regressor.fit(X_train, y_train)
#Step 5: Using the trained model predict the output for testing set
y_pred = regressor.predict(X_test)
#Step 6: Evaluate the model
from sklearn.metrics import mean_squared_error, r2_score
print("Mean squared error: " , round(mean_squared_error(y_test, y_pred),2))
print("Coefficient of determination: ", round(r2_score(y_test, y_pred),2))

import matplotlib.pyplot as plt
#plot basic scatterplot
plt.scatter(X_test[:,2], y_test, label =
'Actual')
#plot the regression line
plt.scatter(X_test[:,2], y_pred, label =
'Predicted' )
plt.xlabel("Scaled BMI")
plt.ylabel("Disease Progression")
plt.legend()
plt.show()

#Step 1: Importing data and preprocessing
from sklearn import datasets
X, y = datasets.load_diabetes(return_X_y=True)
#Step 2: Splitting the data
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state = 1)
#Step 3: Selecting and Creating the model
from sklearn.svm import SVR
regressor = SVR(kernel = 'rbf')
#Step 4: training the model on training set
regressor.fit(X_train, y_train)
#Step 5: Using the trained model predict the output for testing set
y_pred = regressor.predict(X_test)
#Step 6: Evaluate the model
from sklearn.metrics import mean_squared_error, r2_score
print("Mean squared error: " , round(mean_squared_error(y_test, y_pred),2))
print("Coefficient of determination: ", round(r2_score(y_test, y_pred),2))

import matplotlib.pyplot as plt
#plot basic scatterplot
plt.scatter(X_test[:,2], y_test, label =
'Actual')
#plot the regression line
plt.scatter(X_test[:,2], y_pred, label =
'Predicted' )
plt.xlabel("Scaled BMI")
plt.ylabel("Disease Progression")
plt.legend()
plt.show()